// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entities "github.com/nurdsoft/redesign-grp-trust-portal-api/internal/company/entities"
	entities0 "github.com/nurdsoft/redesign-grp-trust-portal-api/internal/frameworks/entities"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCompanyFrameworksLink mocks base method.
func (m *MockRepository) CreateCompanyFrameworksLink(ctx context.Context, companyUUID, userUUID *uuid.UUID, frameworkNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanyFrameworksLink", ctx, companyUUID, userUUID, frameworkNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompanyFrameworksLink indicates an expected call of CreateCompanyFrameworksLink.
func (mr *MockRepositoryMockRecorder) CreateCompanyFrameworksLink(ctx, companyUUID, userUUID, frameworkNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanyFrameworksLink", reflect.TypeOf((*MockRepository)(nil).CreateCompanyFrameworksLink), ctx, companyUUID, userUUID, frameworkNames)
}

// CreateFrameworkControlRemediations mocks base method.
func (m *MockRepository) CreateFrameworkControlRemediations(ctx context.Context, companyUUID, userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFrameworkControlRemediations", ctx, companyUUID, userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFrameworkControlRemediations indicates an expected call of CreateFrameworkControlRemediations.
func (mr *MockRepositoryMockRecorder) CreateFrameworkControlRemediations(ctx, companyUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFrameworkControlRemediations", reflect.TypeOf((*MockRepository)(nil).CreateFrameworkControlRemediations), ctx, companyUUID, userUUID)
}

// DeleteCompanyFrameworksLink mocks base method.
func (m *MockRepository) DeleteCompanyFrameworksLink(ctx context.Context, companyUUID, userUUID *uuid.UUID, frameworkNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyFrameworksLink", ctx, companyUUID, userUUID, frameworkNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompanyFrameworksLink indicates an expected call of DeleteCompanyFrameworksLink.
func (mr *MockRepositoryMockRecorder) DeleteCompanyFrameworksLink(ctx, companyUUID, userUUID, frameworkNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyFrameworksLink", reflect.TypeOf((*MockRepository)(nil).DeleteCompanyFrameworksLink), ctx, companyUUID, userUUID, frameworkNames)
}

// GetCompanyByUUID mocks base method.
func (m *MockRepository) GetCompanyByUUID(ctx context.Context, companyUuid *uuid.UUID) (*entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByUUID", ctx, companyUuid)
	ret0, _ := ret[0].(*entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByUUID indicates an expected call of GetCompanyByUUID.
func (mr *MockRepositoryMockRecorder) GetCompanyByUUID(ctx, companyUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByUUID", reflect.TypeOf((*MockRepository)(nil).GetCompanyByUUID), ctx, companyUuid)
}

// GetFrameworkControls mocks base method.
func (m *MockRepository) GetFrameworkControls(ctx context.Context, companyUuid, userUuid, frameworkUuid *uuid.UUID) ([]*entities0.FrameworkControl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrameworkControls", ctx, companyUuid, userUuid, frameworkUuid)
	ret0, _ := ret[0].([]*entities0.FrameworkControl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrameworkControls indicates an expected call of GetFrameworkControls.
func (mr *MockRepositoryMockRecorder) GetFrameworkControls(ctx, companyUuid, userUuid, frameworkUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrameworkControls", reflect.TypeOf((*MockRepository)(nil).GetFrameworkControls), ctx, companyUuid, userUuid, frameworkUuid)
}

// GetFrameworkStats mocks base method.
func (m *MockRepository) GetFrameworkStats(ctx context.Context, companyUuid, userUuid *uuid.UUID) ([]*entities0.GetFrameworkStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrameworkStats", ctx, companyUuid, userUuid)
	ret0, _ := ret[0].([]*entities0.GetFrameworkStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrameworkStats indicates an expected call of GetFrameworkStats.
func (mr *MockRepositoryMockRecorder) GetFrameworkStats(ctx, companyUuid, userUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrameworkStats", reflect.TypeOf((*MockRepository)(nil).GetFrameworkStats), ctx, companyUuid, userUuid)
}

// GetFrameworks mocks base method.
func (m *MockRepository) GetFrameworks(ctx context.Context, companyUuid, userUuid *uuid.UUID) ([]*entities0.Framework, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrameworks", ctx, companyUuid, userUuid)
	ret0, _ := ret[0].([]*entities0.Framework)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrameworks indicates an expected call of GetFrameworks.
func (mr *MockRepositoryMockRecorder) GetFrameworks(ctx, companyUuid, userUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrameworks", reflect.TypeOf((*MockRepository)(nil).GetFrameworks), ctx, companyUuid, userUuid)
}
