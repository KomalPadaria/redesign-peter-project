// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entities "github.com/nurdsoft/redesign-grp-trust-portal-api/internal/user/entities"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ActivateOrDeactivateByEmail mocks base method.
func (m *MockRepository) ActivateOrDeactivateByEmail(ctx context.Context, externalId string, isActive bool) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateOrDeactivateByEmail", ctx, externalId, isActive)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateOrDeactivateByEmail indicates an expected call of ActivateOrDeactivateByEmail.
func (mr *MockRepositoryMockRecorder) ActivateOrDeactivateByEmail(ctx, externalId, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateOrDeactivateByEmail", reflect.TypeOf((*MockRepository)(nil).ActivateOrDeactivateByEmail), ctx, externalId, isActive)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, user *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, user)
}

// DeleteCompanyUserLink mocks base method.
func (m *MockRepository) DeleteCompanyUserLink(ctx context.Context, companyUUID, reqUserUUID, userUUID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyUserLink", ctx, companyUUID, reqUserUUID, userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompanyUserLink indicates an expected call of DeleteCompanyUserLink.
func (mr *MockRepositoryMockRecorder) DeleteCompanyUserLink(ctx, companyUUID, reqUserUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyUserLink", reflect.TypeOf((*MockRepository)(nil).DeleteCompanyUserLink), ctx, companyUUID, reqUserUUID, userUUID)
}

// FindByEmail mocks base method.
func (m *MockRepository) FindByEmail(ctx context.Context, username string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, username)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockRepositoryMockRecorder) FindByEmail(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockRepository)(nil).FindByEmail), ctx, username)
}

// FindByExternalId mocks base method.
func (m *MockRepository) FindByExternalId(ctx context.Context, externalId string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByExternalId", ctx, externalId)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByExternalId indicates an expected call of FindByExternalId.
func (mr *MockRepositoryMockRecorder) FindByExternalId(ctx, externalId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByExternalId", reflect.TypeOf((*MockRepository)(nil).FindByExternalId), ctx, externalId)
}

// FindByUUID mocks base method.
func (m *MockRepository) FindByUUID(ctx context.Context, userUUID uuid.UUID) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", ctx, userUUID)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockRepositoryMockRecorder) FindByUUID(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockRepository)(nil).FindByUUID), ctx, userUUID)
}

// FindByUsername mocks base method.
func (m *MockRepository) FindByUsername(ctx context.Context, username string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", ctx, username)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockRepositoryMockRecorder) FindByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockRepository)(nil).FindByUsername), ctx, username)
}

// GetCompanyUser mocks base method.
func (m *MockRepository) GetCompanyUser(ctx context.Context, userUUID, comapnyUUID uuid.UUID) (*entities.CompanyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUser", ctx, userUUID, comapnyUUID)
	ret0, _ := ret[0].(*entities.CompanyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyUser indicates an expected call of GetCompanyUser.
func (mr *MockRepositoryMockRecorder) GetCompanyUser(ctx, userUUID, comapnyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUser", reflect.TypeOf((*MockRepository)(nil).GetCompanyUser), ctx, userUUID, comapnyUUID)
}

// GetCompanyUserByUserId mocks base method.
func (m *MockRepository) GetCompanyUserByUserId(ctx context.Context, userUUID uuid.UUID) ([]*entities.CompanyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUserByUserId", ctx, userUUID)
	ret0, _ := ret[0].([]*entities.CompanyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyUserByUserId indicates an expected call of GetCompanyUserByUserId.
func (mr *MockRepositoryMockRecorder) GetCompanyUserByUserId(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUserByUserId", reflect.TypeOf((*MockRepository)(nil).GetCompanyUserByUserId), ctx, userUUID)
}

// GetCompanyUsers mocks base method.
func (m *MockRepository) GetCompanyUsers(ctx context.Context, companyUUID, userUUID uuid.UUID) ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUsers", ctx, companyUUID, userUUID)
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyUsers indicates an expected call of GetCompanyUsers.
func (mr *MockRepositoryMockRecorder) GetCompanyUsers(ctx, companyUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUsers", reflect.TypeOf((*MockRepository)(nil).GetCompanyUsers), ctx, companyUUID, userUUID)
}

// LinkCompanyAndUser mocks base method.
func (m *MockRepository) LinkCompanyAndUser(ctx context.Context, companyUser *entities.CompanyUser) (*entities.CompanyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkCompanyAndUser", ctx, companyUser)
	ret0, _ := ret[0].(*entities.CompanyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkCompanyAndUser indicates an expected call of LinkCompanyAndUser.
func (mr *MockRepositoryMockRecorder) LinkCompanyAndUser(ctx, companyUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkCompanyAndUser", reflect.TypeOf((*MockRepository)(nil).LinkCompanyAndUser), ctx, companyUser)
}

// UpdateCompanyUserLink mocks base method.
func (m *MockRepository) UpdateCompanyUserLink(ctx context.Context, user *entities.CompanyUser) (*entities.CompanyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyUserLink", ctx, user)
	ret0, _ := ret[0].(*entities.CompanyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompanyUserLink indicates an expected call of UpdateCompanyUserLink.
func (mr *MockRepositoryMockRecorder) UpdateCompanyUserLink(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyUserLink", reflect.TypeOf((*MockRepository)(nil).UpdateCompanyUserLink), ctx, user)
}

// UpdateCurrentCompany mocks base method.
func (m *MockRepository) UpdateCurrentCompany(ctx context.Context, userUUID, companyUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentCompany", ctx, userUUID, companyUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrentCompany indicates an expected call of UpdateCurrentCompany.
func (mr *MockRepositoryMockRecorder) UpdateCurrentCompany(ctx, userUUID, companyUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentCompany", reflect.TypeOf((*MockRepository)(nil).UpdateCurrentCompany), ctx, userUUID, companyUUID)
}

// UpdateIsFirstLoginByUserUuid mocks base method.
func (m *MockRepository) UpdateIsFirstLoginByUserUuid(ctx context.Context, userUUID uuid.UUID, isFirstLogin bool) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsFirstLoginByUserUuid", ctx, userUUID, isFirstLogin)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIsFirstLoginByUserUuid indicates an expected call of UpdateIsFirstLoginByUserUuid.
func (mr *MockRepositoryMockRecorder) UpdateIsFirstLoginByUserUuid(ctx, userUUID, isFirstLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsFirstLoginByUserUuid", reflect.TypeOf((*MockRepository)(nil).UpdateIsFirstLoginByUserUuid), ctx, userUUID, isFirstLogin)
}

// UpdateUserCompanyStatus mocks base method.
func (m *MockRepository) UpdateUserCompanyStatus(ctx context.Context, userUUID uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCompanyStatus", ctx, userUUID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCompanyStatus indicates an expected call of UpdateUserCompanyStatus.
func (mr *MockRepositoryMockRecorder) UpdateUserCompanyStatus(ctx, userUUID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCompanyStatus", reflect.TypeOf((*MockRepository)(nil).UpdateUserCompanyStatus), ctx, userUUID, status)
}

// UpdateUserDetails mocks base method.
func (m *MockRepository) UpdateUserDetails(ctx context.Context, userUUID uuid.UUID, details map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetails", ctx, userUUID, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockRepositoryMockRecorder) UpdateUserDetails(ctx, userUUID, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockRepository)(nil).UpdateUserDetails), ctx, userUUID, details)
}
