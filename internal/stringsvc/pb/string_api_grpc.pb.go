// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: string_api.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringAPIClient is the client API for StringAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringAPIClient interface {
	Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
}

type stringAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStringAPIClient(cc grpc.ClientConnInterface) StringAPIClient {
	return &stringAPIClient{cc}
}

func (c *stringAPIClient) Uppercase(ctx context.Context, in *UppercaseRequest, opts ...grpc.CallOption) (*UppercaseResponse, error) {
	out := new(UppercaseResponse)
	err := c.cc.Invoke(ctx, "/StringAPI/Uppercase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringAPIClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/StringAPI/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringAPIServer is the server API for StringAPI service.
// All implementations must embed UnimplementedStringAPIServer
// for forward compatibility
type StringAPIServer interface {
	Uppercase(context.Context, *UppercaseRequest) (*UppercaseResponse, error)
	Count(context.Context, *CountRequest) (*CountResponse, error)
	mustEmbedUnimplementedStringAPIServer()
}

// UnimplementedStringAPIServer must be embedded to have forward compatible implementations.
type UnimplementedStringAPIServer struct {
}

func (UnimplementedStringAPIServer) Uppercase(context.Context, *UppercaseRequest) (*UppercaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uppercase not implemented")
}
func (UnimplementedStringAPIServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedStringAPIServer) mustEmbedUnimplementedStringAPIServer() {}

// UnsafeStringAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringAPIServer will
// result in compilation errors.
type UnsafeStringAPIServer interface {
	mustEmbedUnimplementedStringAPIServer()
}

func RegisterStringAPIServer(s grpc.ServiceRegistrar, srv StringAPIServer) {
	s.RegisterService(&StringAPI_ServiceDesc, srv)
}

func _StringAPI_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UppercaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringAPIServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StringAPI/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringAPIServer).Uppercase(ctx, req.(*UppercaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringAPI_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringAPIServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StringAPI/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringAPIServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StringAPI_ServiceDesc is the grpc.ServiceDesc for StringAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StringAPI",
	HandlerType: (*StringAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Uppercase",
			Handler:    _StringAPI_Uppercase_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _StringAPI_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "string_api.proto",
}
