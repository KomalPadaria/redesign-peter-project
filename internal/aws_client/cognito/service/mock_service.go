// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/nurdsoft/redesign-grp-trust-portal-api/internal/aws_client/cognito/entities"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetClaimsFromIDToken mocks base method.
func (m *MockService) GetClaimsFromIDToken(ctx context.Context, idToken string) (*entities.AWSCognitoIDTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimsFromIDToken", ctx, idToken)
	ret0, _ := ret[0].(*entities.AWSCognitoIDTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimsFromIDToken indicates an expected call of GetClaimsFromIDToken.
func (mr *MockServiceMockRecorder) GetClaimsFromIDToken(ctx, idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimsFromIDToken", reflect.TypeOf((*MockService)(nil).GetClaimsFromIDToken), ctx, idToken)
}

// InviteUser mocks base method.
func (m *MockService) InviteUser(ctx context.Context, details entities.InviteUserDetails, resend bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUser", ctx, details, resend)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteUser indicates an expected call of InviteUser.
func (mr *MockServiceMockRecorder) InviteUser(ctx, details, resend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUser", reflect.TypeOf((*MockService)(nil).InviteUser), ctx, details, resend)
}

// UpdateUserAttributes mocks base method.
func (m *MockService) UpdateUserAttributes(ctx context.Context, details map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAttributes", ctx, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAttributes indicates an expected call of UpdateUserAttributes.
func (mr *MockServiceMockRecorder) UpdateUserAttributes(ctx, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAttributes", reflect.TypeOf((*MockService)(nil).UpdateUserAttributes), ctx, details)
}

// VerifyToken mocks base method.
func (m *MockService) VerifyToken(ctx context.Context, token string) (*entities.AWSCognitoIDTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(*entities.AWSCognitoIDTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockServiceMockRecorder) VerifyToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockService)(nil).VerifyToken), ctx, token)
}
