// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entities "github.com/nurdsoft/redesign-grp-trust-portal-api/internal/company_settings/websites/entities"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateWebsite mocks base method.
func (m *MockRepository) CreateWebsite(ctx context.Context, website *entities.CompanyWebsite) (*entities.CompanyWebsite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebsite", ctx, website)
	ret0, _ := ret[0].(*entities.CompanyWebsite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebsite indicates an expected call of CreateWebsite.
func (mr *MockRepositoryMockRecorder) CreateWebsite(ctx, website interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebsite", reflect.TypeOf((*MockRepository)(nil).CreateWebsite), ctx, website)
}

// DeleteWebsite mocks base method.
func (m *MockRepository) DeleteWebsite(ctx context.Context, websiteUuid *uuid.UUID) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebsite", ctx, websiteUuid)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebsite indicates an expected call of DeleteWebsite.
func (mr *MockRepositoryMockRecorder) DeleteWebsite(ctx, websiteUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebsite", reflect.TypeOf((*MockRepository)(nil).DeleteWebsite), ctx, websiteUuid)
}

// GetAllWebsites mocks base method.
func (m *MockRepository) GetAllWebsites(ctx context.Context, companyUuid *uuid.UUID) ([]*entities.CompanyWebsite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWebsites", ctx, companyUuid)
	ret0, _ := ret[0].([]*entities.CompanyWebsite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWebsites indicates an expected call of GetAllWebsites.
func (mr *MockRepositoryMockRecorder) GetAllWebsites(ctx, companyUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWebsites", reflect.TypeOf((*MockRepository)(nil).GetAllWebsites), ctx, companyUuid)
}

// GetWebsiteById mocks base method.
func (m *MockRepository) GetWebsiteById(ctx context.Context, websiteUuid *uuid.UUID) (*entities.CompanyWebsite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebsiteById", ctx, websiteUuid)
	ret0, _ := ret[0].(*entities.CompanyWebsite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebsiteById indicates an expected call of GetWebsiteById.
func (mr *MockRepositoryMockRecorder) GetWebsiteById(ctx, websiteUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebsiteById", reflect.TypeOf((*MockRepository)(nil).GetWebsiteById), ctx, websiteUuid)
}

// UpdateWebsite mocks base method.
func (m *MockRepository) UpdateWebsite(ctx context.Context, website *entities.CompanyWebsite) (*entities.CompanyWebsite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebsite", ctx, website)
	ret0, _ := ret[0].(*entities.CompanyWebsite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebsite indicates an expected call of UpdateWebsite.
func (mr *MockRepositoryMockRecorder) UpdateWebsite(ctx, website interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebsite", reflect.TypeOf((*MockRepository)(nil).UpdateWebsite), ctx, website)
}
