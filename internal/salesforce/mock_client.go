// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package salesforce is a generated GoMock package.
package salesforce

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/nurdsoft/redesign-grp-trust-portal-api/internal/salesforce/config"
	entities "github.com/nurdsoft/redesign-grp-trust-portal-api/internal/salesforce/entities"
	service "github.com/nurdsoft/redesign-grp-trust-portal-api/internal/salesforce/service"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetAccountByID mocks base method.
func (m *MockClient) GetAccountByID(ctx context.Context, session *service.SFSession, accountId string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, session, accountId)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockClientMockRecorder) GetAccountByID(ctx, session, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockClient)(nil).GetAccountByID), ctx, session, accountId)
}

// GetConfig mocks base method.
func (m *MockClient) GetConfig() config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(config.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockClientMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClient)(nil).GetConfig))
}

// GetContactByID mocks base method.
func (m *MockClient) GetContactByID(ctx context.Context, session *service.SFSession, contactId string) (*entities.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactByID", ctx, session, contactId)
	ret0, _ := ret[0].(*entities.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactByID indicates an expected call of GetContactByID.
func (mr *MockClientMockRecorder) GetContactByID(ctx, session, contactId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactByID", reflect.TypeOf((*MockClient)(nil).GetContactByID), ctx, session, contactId)
}

// GetContractsByAccountId mocks base method.
func (m *MockClient) GetContractsByAccountId(ctx context.Context, session *service.SFSession, accountId string) ([]entities.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsByAccountId", ctx, session, accountId)
	ret0, _ := ret[0].([]entities.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsByAccountId indicates an expected call of GetContractsByAccountId.
func (mr *MockClientMockRecorder) GetContractsByAccountId(ctx, session, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsByAccountId", reflect.TypeOf((*MockClient)(nil).GetContractsByAccountId), ctx, session, accountId)
}

// GetSubscriptionsByAccountID mocks base method.
func (m *MockClient) GetSubscriptionsByAccountID(ctx context.Context, session *service.SFSession, accountId string) ([]entities.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByAccountID", ctx, session, accountId)
	ret0, _ := ret[0].([]entities.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByAccountID indicates an expected call of GetSubscriptionsByAccountID.
func (mr *MockClientMockRecorder) GetSubscriptionsByAccountID(ctx, session, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByAccountID", reflect.TypeOf((*MockClient)(nil).GetSubscriptionsByAccountID), ctx, session, accountId)
}

// GetSubscriptionsByID mocks base method.
func (m *MockClient) GetSubscriptionsByID(ctx context.Context, session *service.SFSession, subscriptionsID string) (*entities.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsByID", ctx, session, subscriptionsID)
	ret0, _ := ret[0].(*entities.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsByID indicates an expected call of GetSubscriptionsByID.
func (mr *MockClientMockRecorder) GetSubscriptionsByID(ctx, session, subscriptionsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsByID", reflect.TypeOf((*MockClient)(nil).GetSubscriptionsByID), ctx, session, subscriptionsID)
}

// NewSession mocks base method.
func (m *MockClient) NewSession(ctx context.Context) (*service.SFSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", ctx)
	ret0, _ := ret[0].(*service.SFSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockClientMockRecorder) NewSession(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockClient)(nil).NewSession), ctx)
}

// UpdateJiraEpicIdForAccount mocks base method.
func (m *MockClient) UpdateJiraEpicIdForAccount(ctx context.Context, session *service.SFSession, accountId, jiraEpicId string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJiraEpicIdForAccount", ctx, session, accountId, jiraEpicId)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJiraEpicIdForAccount indicates an expected call of UpdateJiraEpicIdForAccount.
func (mr *MockClientMockRecorder) UpdateJiraEpicIdForAccount(ctx, session, accountId, jiraEpicId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJiraEpicIdForAccount", reflect.TypeOf((*MockClient)(nil).UpdateJiraEpicIdForAccount), ctx, session, accountId, jiraEpicId)
}
