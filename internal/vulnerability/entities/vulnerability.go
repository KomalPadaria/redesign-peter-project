package entities

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/nurdsoft/redesign-grp-trust-portal-api/internal/remediation/entities"
	"github.com/nurdsoft/redesign-grp-trust-portal-api/shared/nullable"
)

type Vulnerability struct {
	Severity    string            `json:"severity"`
	Scvss       string            `json:"scvss"`
	Instance    string            `json:"instance"`
	Date        nullable.NullTime `json:"date,omitempty"`
	Issue       string            `json:"issue"`
	Remediation *Remediation      `json:"remediation"`
}

type Remediation struct {
	Category       string `json:"category"`
	Code           string `json:"code"`
	Description    string `json:"description"`
	Risk           string `json:"risk"`
	Recommendation string `json:"recommendation"`
}

type VulnerabilityStats struct {
	Scans    *Scan     `json:"scan"`
	Critical *Critical `json:"critical"`
	Total    *Total    `json:"total"`
	Count    *Count    `json:"count"`
}

type Scan struct {
	LastVulnerabilityScan time.Time `json:"current,omitempty"`
	NextVulnerabilityScan time.Time `json:"next,omitempty"`
}

func (s *Scan) MarshalJSON() ([]byte, error) {
	type Alias Scan

	o := &struct {
		*Alias
		LastVulnerabilityScan string `json:"current"`
		NextVulnerabilityScan string `json:"next"`
	}{
		Alias:                 (*Alias)(s),
		LastVulnerabilityScan: s.LastVulnerabilityScan.Format(time.RFC3339),
		NextVulnerabilityScan: s.NextVulnerabilityScan.Format(time.RFC3339),
	}

	if s.LastVulnerabilityScan.IsZero() {
		o.LastVulnerabilityScan = "Not set"
	}

	if s.NextVulnerabilityScan.IsZero() {
		o.NextVulnerabilityScan = "Not set"
	}

	return json.Marshal(o)
}

func (ns *Scan) UnmarshalJSON(data []byte) error {
	type temp struct {
		LastVulnerabilityScan string `json:"current"`
		NextVulnerabilityScan string `json:"next"`
	}

	var o temp
	if err := json.Unmarshal(data, &o); err != nil {
		return err
	}

	if o.LastVulnerabilityScan != "Not set" {
		lv, err := time.Parse(time.RFC3339, o.LastVulnerabilityScan)
		if err != nil {
			return err
		}
		ns.LastVulnerabilityScan = lv
	}

	if o.NextVulnerabilityScan != "Not set" {
		nv, err := time.Parse(time.RFC3339, o.NextVulnerabilityScan)
		if err != nil {
			return err
		}
		ns.NextVulnerabilityScan = nv
	}

	return nil
}

type Critical struct {
	Current     int      `json:"current"`
	Performance float64  `json:"performance"`
	Stats       []*Stats `json:"stats"`
}

type Stats struct {
	Date  time.Time `json:"date"`
	Value int       `json:"value"`
}

type Count struct {
	Critical int `json:"critical"`
	Moderate int `json:"moderate"`
	Severe   int `json:"severe"`
	Total    int `json:"total"`
}

type Total struct {
	Current     int      `json:"current"`
	Performance float64  `json:"performance"`
	Stats       []*Stats `json:"stats"`
}

// Request Types
type GetVulnerabilitiesRequest struct {
	CompanyUuid uuid.UUID `json:"company_uuid"`
	UserUuid    uuid.UUID `json:"user_uuid"`
}

type GetVulnerabilityStatsRequest struct {
	CompanyUuid uuid.UUID `json:"company_uuid"`
	UserUuid    uuid.UUID `json:"user_uuid"`
}

type TopRemediation struct {
	RiskScore         float64                    `json:"-"`
	Title             string                     `json:"title"`
	RemediationDetail entities.RemediationDetail `json:"remediation_detail"`
}
