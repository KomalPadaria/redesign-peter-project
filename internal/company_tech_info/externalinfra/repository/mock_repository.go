// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	"github.com/nurdsoft/redesign-grp-trust-portal-api/internal/company_tech_info/externalinfra/entities"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTechInfoExternalInfra mocks base method.
func (m *MockRepository) CreateTechInfoExternalInfra(ctx context.Context, website *entities.TechInfoExternalInfra) (*entities.TechInfoExternalInfra, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTechInfoExternalInfra", ctx, website)
	ret0, _ := ret[0].(*entities.TechInfoExternalInfra)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTechInfoExternalInfra indicates an expected call of CreateTechInfoExternalInfra.
func (mr *MockRepositoryMockRecorder) CreateTechInfoExternalInfra(ctx, website interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTechInfoExternalInfra", reflect.TypeOf((*MockRepository)(nil).CreateTechInfoExternalInfra), ctx, website)
}

// DeleteTechInfoExternalInfra mocks base method.
func (m *MockRepository) DeleteTechInfoExternalInfra(ctx context.Context, websiteUuid *uuid.UUID) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTechInfoExternalInfra", ctx, websiteUuid)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTechInfoExternalInfra indicates an expected call of DeleteTechInfoExternalInfra.
func (mr *MockRepositoryMockRecorder) DeleteTechInfoExternalInfra(ctx, websiteUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTechInfoExternalInfra", reflect.TypeOf((*MockRepository)(nil).DeleteTechInfoExternalInfra), ctx, websiteUuid)
}

// GetAllTechInfoExternalInfras mocks base method.
func (m *MockRepository) GetAllTechInfoExternalInfras(ctx context.Context, companyUuid *uuid.UUID) ([]*entities.TechInfoExternalInfra, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTechInfoExternalInfras", ctx, companyUuid)
	ret0, _ := ret[0].([]*entities.TechInfoExternalInfra)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTechInfoExternalInfras indicates an expected call of GetAllTechInfoExternalInfras.
func (mr *MockRepositoryMockRecorder) GetAllTechInfoExternalInfras(ctx, companyUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTechInfoExternalInfras", reflect.TypeOf((*MockRepository)(nil).GetAllTechInfoExternalInfras), ctx, companyUuid)
}

// GetTechInfoExternalInfraById mocks base method.
func (m *MockRepository) GetTechInfoExternalInfraById(ctx context.Context, websiteUuid *uuid.UUID) (*entities.TechInfoExternalInfra, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTechInfoExternalInfraById", ctx, websiteUuid)
	ret0, _ := ret[0].(*entities.TechInfoExternalInfra)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTechInfoExternalInfraById indicates an expected call of GetTechInfoExternalInfraById.
func (mr *MockRepositoryMockRecorder) GetTechInfoExternalInfraById(ctx, websiteUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTechInfoExternalInfraById", reflect.TypeOf((*MockRepository)(nil).GetTechInfoExternalInfraById), ctx, websiteUuid)
}

// UpdateTechInfoExternalInfra mocks base method.
func (m *MockRepository) UpdateTechInfoExternalInfra(ctx context.Context, website *entities.TechInfoExternalInfra) (*entities.TechInfoExternalInfra, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTechInfoExternalInfra", ctx, website)
	ret0, _ := ret[0].(*entities.TechInfoExternalInfra)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTechInfoExternalInfra indicates an expected call of UpdateTechInfoExternalInfra.
func (mr *MockRepositoryMockRecorder) UpdateTechInfoExternalInfra(ctx, website interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTechInfoExternalInfra", reflect.TypeOf((*MockRepository)(nil).UpdateTechInfoExternalInfra), ctx, website)
}
