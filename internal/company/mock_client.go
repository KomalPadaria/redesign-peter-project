// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package company is a generated GoMock package.
package company

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entities "github.com/nurdsoft/redesign-grp-trust-portal-api/internal/company/entities"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockClient) CreateCompany(ctx context.Context, user *entities.UsersCompany) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockClientMockRecorder) CreateCompany(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockClient)(nil).CreateCompany), ctx, user)
}

// CreateCompanySubscription mocks base method.
func (m *MockClient) CreateCompanySubscription(ctx context.Context, cs *entities.CompanySubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanySubscription", ctx, cs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompanySubscription indicates an expected call of CreateCompanySubscription.
func (mr *MockClientMockRecorder) CreateCompanySubscription(ctx, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanySubscription", reflect.TypeOf((*MockClient)(nil).CreateCompanySubscription), ctx, cs)
}

// DeleteCompanySubscription mocks base method.
func (m *MockClient) DeleteCompanySubscription(ctx context.Context, companyUuid *uuid.UUID, subscriptionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanySubscription", ctx, companyUuid, subscriptionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompanySubscription indicates an expected call of DeleteCompanySubscription.
func (mr *MockClientMockRecorder) DeleteCompanySubscription(ctx, companyUuid, subscriptionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanySubscription", reflect.TypeOf((*MockClient)(nil).DeleteCompanySubscription), ctx, companyUuid, subscriptionId)
}

// FindByExternalId mocks base method.
func (m *MockClient) FindByExternalId(ctx context.Context, req *entities.FindCompanyByExternalIdRequest) (*entities.FindCompanyByExternalIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByExternalId", ctx, req)
	ret0, _ := ret[0].(*entities.FindCompanyByExternalIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByExternalId indicates an expected call of FindByExternalId.
func (mr *MockClientMockRecorder) FindByExternalId(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByExternalId", reflect.TypeOf((*MockClient)(nil).FindByExternalId), ctx, req)
}

// FindByUUID mocks base method.
func (m *MockClient) FindByUUID(ctx context.Context, companyUuid *entities.GetCompanyByIdRequest) (*entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", ctx, companyUuid)
	ret0, _ := ret[0].(*entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockClientMockRecorder) FindByUUID(ctx, companyUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockClient)(nil).FindByUUID), ctx, companyUuid)
}

// GetAllCompanies mocks base method.
func (m *MockClient) GetAllCompanies(ctx context.Context, req *entities.GetAllCompaniesRequest) ([]*entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanies", ctx, req)
	ret0, _ := ret[0].([]*entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCompanies indicates an expected call of GetAllCompanies.
func (mr *MockClientMockRecorder) GetAllCompanies(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanies", reflect.TypeOf((*MockClient)(nil).GetAllCompanies), ctx, req)
}

// GetUserCompaniesByUserUuid mocks base method.
func (m *MockClient) GetUserCompaniesByUserUuid(ctx context.Context, id *entities.GetCompaniesByUserIdRequest) (*entities.GetCompaniesByUserIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCompaniesByUserUuid", ctx, id)
	ret0, _ := ret[0].(*entities.GetCompaniesByUserIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCompaniesByUserUuid indicates an expected call of GetUserCompaniesByUserUuid.
func (mr *MockClientMockRecorder) GetUserCompaniesByUserUuid(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCompaniesByUserUuid", reflect.TypeOf((*MockClient)(nil).GetUserCompaniesByUserUuid), ctx, id)
}

// UpdateCompany mocks base method.
func (m *MockClient) UpdateCompany(ctx context.Context, updateData *entities.UpdateCompanyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockClientMockRecorder) UpdateCompany(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockClient)(nil).UpdateCompany), ctx, updateData)
}

// UpdateCompanySubscription mocks base method.
func (m *MockClient) UpdateCompanySubscription(ctx context.Context, companyUuid *uuid.UUID, subscriptionId string, cs *entities.CompanySubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanySubscription", ctx, companyUuid, subscriptionId, cs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompanySubscription indicates an expected call of UpdateCompanySubscription.
func (mr *MockClientMockRecorder) UpdateCompanySubscription(ctx, companyUuid, subscriptionId, cs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanySubscription", reflect.TypeOf((*MockClient)(nil).UpdateCompanySubscription), ctx, companyUuid, subscriptionId, cs)
}
